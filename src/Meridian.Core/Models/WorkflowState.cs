namespace Meridian.Core.Models;

using Dtos;
using Enums;
using Extensions;
using Interfaces;

/// <summary>
/// Represents a state in a workflow, designed to hold state-specific information and define
/// the actions and hooks associated with the state.
/// </summary>
/// <typeparam name="TData">
/// The type of data associated with the workflow, constrained to implement <see cref="IWorkflowData"/>.
/// </typeparam>
public sealed class WorkflowState<TData>(string name) where TData : class, IWorkflowData
{
    /// <summary>
    /// Represents the internal state type of the workflow state.
    /// Determines the specific category or condition of the state, such as Start, Normal, Completed, Cancelled, or Rejected.
    /// </summary>
    /// <remarks>
    /// This property is privately set and utilized internally within the workflow state to designate its current operational type.
    /// It defaults to <see cref="StateType.Normal"/> and can be updated through various workflow methods such as IsCompleted, IsStarted, etc.
    /// </remarks>
    private StateType StateType { get; set; } = StateType.Normal;

    /// <summary>
    /// Gets or sets the name of the workflow state.
    /// This property is used to identify and label the current state within a workflow.
    /// </summary>
    public string Name { get; private set; } = name;
    
    public string Label { get; internal set; } = name;

    /// <summary>
    /// Gets the Code for the workflow state, which is derived from the state name.
    /// The value is generated by converting the property <see cref="Name" /> into PascalCase format.
    /// </summary>
    /// <remarks>
    /// The Code property provides a standardized representation of the state by transforming
    /// the <see cref="Name" /> property into PascalCase using the provided string extension method.
    /// This property is read-only and dynamically computed.
    /// </remarks>
    public string Code => this.Name.ToPascalCase();

    /// <summary>
    /// Represents the collection of workflow actions associated with a specific workflow state.
    /// Each action defines a possible operation in the workflow, with associated transitions,
    /// conditions, and user or role assignments.
    /// </summary>
    /// <remarks>
    /// Actions allow for defining the behavior of a workflow state, such as transitioning to
    /// another state or executing specific logic based on conditions. An action can be auto-triggered,
    /// validated, and assigned to specific users, roles, or groups.
    /// </remarks>
    internal List<WorkflowAction<TData>> Actions { get; set; } = [];

    /// <summary>
    /// A collection of hooks to be executed when entering a specific workflow state.
    /// </summary>
    /// <remarks>
    /// The <c>OnEnterHooks</c> property contains a list of descriptors representing
    /// actions or processes to be triggered upon transitioning into the associated state.
    /// These hooks allow customizing the behavior and side effects of the workflow
    /// during state entry.
    /// </remarks>
    /// <typeparam name="TData">
    /// The type of the workflow data associated with the state; must implement the <c>IWorkflowData</c> interface.
    /// </typeparam>
    public List<WorkflowHookDescriptor<TData>> OnEnterHooks { get; internal set; } = [];

    /// <summary>
    /// Represents a collection of hooks to be executed when exiting a workflow state.
    /// </summary>
    /// <typeparam name="TData">
    /// The type of data associated with the workflow, which implements the <see cref="IWorkflowData"/> interface.
    /// </typeparam>
    /// <remarks>
    /// The hooks stored in this property are triggered when the state is exited. The behavior of these hooks
    /// is defined by their respective <see cref="WorkflowHookDescriptor{TData}"/> instances.
    /// </remarks>
    public List<WorkflowHookDescriptor<TData>> OnExitHooks { get; internal set; } = [];

    /// <summary>
    /// Gets the type of the workflow state represented by the <see cref="Enums.StateType"/> enumeration.
    /// StateType can indicate whether the state is Start, Normal, Completed, Cancelled, or Rejected.
    /// </summary>
    /// <value>
    /// A value of type <see cref="Enums.StateType"/> that specifies the current type of the workflow state.
    /// </value>
    public StateType Type => this.StateType;


    /// <summary>
    /// Sets the type of the current workflow state.
    /// </summary>
    /// <param name="type">
    /// The type of the state, represented by the <see cref="StateType"/> enumeration. This allows specifying
    /// whether the state is a start, normal, completed, cancelled, or rejected state.
    /// </param>
    internal void WithType(StateType type)
    {
        this.StateType = type;
    }
}